
import streamlit as st
import pandas as pd
import numpy as np
from sklearn.ensemble import RandomForestClassifier
from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import train_test_split

st.set_page_config(page_title="AI D·ª± ƒëo√°n T√°c nh√¢n & G·ª£i √Ω Kh√°ng sinh")
st.title("üß¨ AI D·ª± ƒëo√°n T√°c nh√¢n v√† G·ª£i √Ω Kh√°ng sinh")

@st.cache_data
def train_model():
    df = pd.read_csv("M√¥ h√¨nh AI.csv")
    df = df[df["Tac nhan"] != "unspecified"]  # Lo·∫°i nh√£n

    X = df.drop(columns=["Tac nhan"])
    y = df["Tac nhan"]

    label_encoder = LabelEncoder()
    y_encoded = label_encoder.fit_transform(y)

    model = RandomForestClassifier(random_state=42)
    model.fit(X, y_encoded)
    return model, X.columns.tolist(), label_encoder

model, feature_cols, label_encoder = train_model()

# Nh·∫≠p d·ªØ li·ªáu
st.header("üìã Nh·∫≠p d·ªØ li·ªáu l√¢m s√†ng")
user_input = {}

def binary_input(label):
    return 1 if st.radio(label, ["Kh√¥ng", "C√≥"], horizontal=True) == "C√≥" else 0

for col in feature_cols:
    if col.lower() in ["sot", "ho", "chay mui", "dam", "non oi", "tieu chay", "kich thich quay khoc",
                      "tho met", "tho nhanh", "bo an kem", "dong dac phoi phai", "dong dac phoi trai",
                      "ran phoi", "su dung khang sinh truoc khi den vien"]:
        user_input[col] = binary_input(col)
    else:
        user_input[col] = st.number_input(col, value=0.0, format="%.2f")

if st.button("üîç D·ª± ƒëo√°n"):
    df_input = pd.DataFrame([user_input])
    prediction = model.predict(df_input[feature_cols])[0]
    label = label_encoder.inverse_transform([prediction])[0]
    st.success(f"‚úÖ T√°c nh√¢n g√¢y b·ªánh ƒë∆∞·ª£c d·ª± ƒëo√°n: **{label}**")

    st.subheader("üíä Kh√°ng sinh g·ª£i √Ω:")
    if label == "RSV":
        st.info("RSV l√† virus, kh√¥ng g·ª£i √Ω kh√°ng sinh")
    elif label == "M. pneumonia":
        st.write("**Th∆∞·ªùng d√πng:** Macrolide (Azithromycin, Clarithromycin), Tetracycline")
    else:
        try:
            df_k = pd.read_csv("M√¥ h√¨nh KSD.csv")
            row = df_k[df_k["Tac nhan"] == label].drop(columns=["Tac nhan"])
            if not row.empty:
                antibiotics = row.columns[row.values[0] == 0.5].tolist()
                if antibiotics:
                    st.write("Kh√°ng sinh nh·∫°y (g·ª£i √Ω):", ", ".join(antibiotics))
                else:
                    st.write("Kh√¥ng c√≥ kh√°ng sinh n√†o ƒë∆∞·ª£c g·ª£i √Ω.")
            else:
                st.warning("Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu kh√°ng sinh.")
        except Exception as e:
            st.error("L·ªói khi ƒë·ªçc file kh√°ng sinh g·ª£i √Ω.")
